<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:mock="http://www.mulesoft.org/schema/mule/mock"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:core="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/mock http://www.mulesoft.org/schema/mule/mock/current/mule-mock.xsd
http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">

    <munit:config name="munit" doc:name="MUnit configuration"/>
    <spring:beans>
        <spring:import resource="classpath:unvr-esb-pa-salesorder-api-impl.xml"/>
    </spring:beans>
    
    <scripting:script name="MockInvalidXmlException"
        engine="Groovy" file="sample_data/mock/mock-invalid-xml-exception-response.groovy"
        doc:name="Mock DB exception scenario" />
    
    <!-- Successful test scenario -->
    <munit:test name="new-test-suite-unvr-esb-pa-salesorder-mq_successTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock WMQ push messages">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send successful message to reply queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/mock/mock-system-api-response.xml').asByteArray()]"/>
        </mock:when>

        <mock:when messageProcessor=".*:.*" doc:name="Mock WMQ push messages">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send message to the backup queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/sample_input_message.xml')]"/>
        </mock:when>

        <mock:when messageProcessor=".*:.*" doc:name="Mock schema validation object">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke schema validation']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/sample_input_message.xml').asByteArray()]"/>

        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock http request client">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Call Univar system get-cumulative-total api']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/mock/mock-system-api-response.xml')]"/>

        </mock:when>
    	<munit:set payload="#[getResource('sample_data/sample_input_message.xml').asByteArray()]" doc:name="Set xml payload">
            <munit:invocation-properties>
                <munit:invocation-property key="JMSMessageID" value="ID:305:1:5:1:1"/>
            </munit:invocation-properties>
        </munit:set>
        <flow-ref name="unvr-esb-pa-salesorder-mq_Flow" doc:name="Flow-ref to unvr-esb-pa-salesorder-mq_Flow"/>
        <object-to-string-transformer />
        <logger level="INFO" message="______________ paylooad #[payload]" doc:name="Logger"/>
        <munit:assert-not-null message="Expect a not null payload as a result of execution of the flow" 
        	doc:name="Make sure the response is not Null"/>
        <munit:assert-true message="Expect DB sql exception" 
        	condition="#[payload.contains(&quot;&lt;Total&gt;123.45&lt;/Total&gt;&quot;)]" 
        	doc:name="Assert successful process mq API response"/>
    </munit:test>
    
    <!-- Invalid xml request scenario -->
    <munit:test name="new-test-suite-unvr-esb-pa-salesorder-mq_invalidXmlRequestTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock WMQ push messages">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send message to the backup queue']"/>
                <mock:with-attribute name="doc:name" whereValue="#['Send error message to failure queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock schema validation object">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke schema validation']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[resultOfScript('MockInvalidXmlException')]"/>
        </mock:when>
    	<munit:set payload="#[getResource('sample_data/mock/mock-invalid-request.xml').asByteArray()]" doc:name="Set xml payload">
            <munit:invocation-properties>
                <munit:invocation-property key="JMSMessageID" value="ID:305:1:5:1:1"/>
            </munit:invocation-properties>
        </munit:set>
        <flow-ref name="unvr-esb-pa-salesorder-mq_Flow" doc:name="Flow-ref to unvr-esb-pa-salesorder-mq_Flow"/>
        <munit:assert-not-null message="Expect a not null payload as a result of execution of the flow" 
        	doc:name="Make sure the response is not Null"/>
        <munit:assert-true message="Expect invalid xml error response" 
        	condition="#[payload.contains(&quot;&lt;ExceptionId&gt;UNIVAR-EX-0004&lt;/ExceptionId&gt;&quot;)]" 
        	doc:name="Assert invalid xml validation API response"/>
    </munit:test>
    
    <!-- System API unavailable -->
    
    <!-- System API 500 response code -->
    <munit:test name="new-test-suite-unvr-esb-pa-salesorder-mq_errorResponseFromSystemApiTest" description="Test">
    	<mock:when messageProcessor=".*:.*" doc:name="Mock WMQ push messages">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Send message to the backup queue']"/>
                <mock:with-attribute name="doc:name" whereValue="#['Send error message to failure queue']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock schema validation object">
            <mock:with-attributes>
                <mock:with-attribute name="doc:name" whereValue="#['Invoke schema validation']"/>
            </mock:with-attributes>
            <mock:then-return payload="#[payload]"/>
        </mock:when>
        <mock:when messageProcessor=".*:.*" doc:name="Mock http request client">
            <mock:with-attributes>
                <mock:with-attribute whereValue="#['Call Univar system get-cumulative-total api']" name="doc:name"/>
            </mock:with-attributes>
            <mock:then-return payload="#[getResource('sample_data/mock/mock-system-api-error-response.xml').asByteArray()]"/>
        </mock:when>
    	<munit:set payload="#[getResource('sample_data/sample_input_message.xml').asByteArray()]" doc:name="Set xml payload">
            <munit:invocation-properties>
                <munit:invocation-property key="JMSMessageID" value="ID:305:1:5:1:1"/>
            </munit:invocation-properties>
        </munit:set>
        <flow-ref name="unvr-esb-pa-salesorder-mq_Flow" doc:name="Flow-ref to unvr-esb-pa-salesorder-mq_Flow"/>
        <munit:assert-not-null message="Expect a not null payload as a result of execution of the flow" 
        	doc:name="Make sure the response is not Null"/>
        <munit:assert-true message="Expect 500 response code from system API" 
        	condition="#[payload.contains(&quot;&lt;ExceptionId&gt;UNIVAR-EX-0001&lt;/ExceptionId&gt;&quot;)]" 
        	doc:name="Assert system API 500 error response"/>
    </munit:test>
    
    <!-- WMQ queue unavailable -->
    
</mule>
