<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:wmq="http://www.mulesoft.org/schema/mule/ee/wmq"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ee/wmq http://www.mulesoft.org/schema/mule/ee/wmq/current/mule-wmq-ee.xsd
 http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd http://www.mulesoft.org/schema/mule/ee/dw
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <flow name="order-implementationFlow">
     <logger message="Incoming payload" level="INFO" doc:name="Incoming payload"/>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="Schema validation" level="INFO" doc:name="Schema validation"/>
        <flow-ref name="SchemaValidationflow" doc:name="SchemaValidationflow"/>
        
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="Validated xml  #[payload]" level="INFO" doc:name="Validated  xml"/>
        <logger message="Call to DCS_MQ API" level="INFO" doc:name="Call to DCS_MQ api"/>

        <http:request config-ref="unvr-esb-sa-dcsmq-HTTP_Request_Configuration" path="/order" method="POST" set="true" doc:name="POST_http_dcs_mq" responseTimeout="60000" type="kjg">
            <http:request-builder>
                <http:query-param paramName="client_id" value="${sa_client_Id}"/>
                <http:query-param paramName="client_secret" value="${sa_client_secret}"/>
            </http:request-builder>
        </http:request>
        <exception-strategy ref="SalesOrderCoupaApiCatchExceptionStrategy" doc:name="Reference Exception Strategy"/>
        
    </flow>
    <sub-flow name="SchemaValidationsubflow">
    <choice doc:name="If Schema validation enabled">
            <when expression="${xml.validation.enabled} == true">
                <logger message="Schema validation xsd: ${xml.schema.location}" level="INFO" doc:name="Schema validation"/>
                <invoke object-ref="schemaValidationBean" method="validateXML" 
                    methodArguments="#[message.payloadAs(java.lang.String)], ${xml.schema.coupacanonical.location}" doc:name="Invoke schema validation"/>
 	               <logger message="Completed schema validation " level="INFO" doc:name="Validation completed"/>
<logger message="testing changes to be made." level="INFO" doc:name="changing logger"></logger>
            </when>

            <otherwise>
<set-payload value="#[flowVars.originalMessage]" encoding="UTF-8" mimeType="application/xml"
                doc:name="Set original message to the failure queue"></set-payload>
            <wmq:outbound-endpoint queue="${wmq.coupa.queue.failure}" connector-ref="WMQ"
                doc:name="Send error message to failure queue" correlationId="#[flowVars.messageId]"></wmq:outbound-endpoint>
                <logger message="failure in qyieyrtj." level="INFO" doc:name="sgjrtdsdbnbsad"></logger>
            </otherwise>
        </choice>
        </sub-flow>
<flow name="testflow">
</flow>
     <choice-exception-strategy name="SalesOrderCoupaApiCatchExceptionStrategy">
        <catch-exception-strategy when="exception.causedBy(org.xml.sax.SAXParseException)" doc:name="Catch Exception Strategy">
            <logger level="ERROR" message="Caught org.xml.sax.SAXParseException. Pushing message to ${wmq.queue.failure} Queue." 
                doc:name="Log error message"/>
            <set-payload value="#[flowVars.originalMessage]" encoding="UTF-8" mimeType="application/xml"
                doc:name="Set original message to the failure queue"></set-payload>
            <wmq:outbound-endpoint queue="${wmq.coupa.queue.failure}" connector-ref="WMQ"
                doc:name="Send error message to failure queue" correlationId="#[flowVars.messageId]"></wmq:outbound-endpoint>
            <set-variable variableName="exceptionDetails" value="#[exception.cause.message]" doc:name="Variable"></set-variable>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload resource="classpath:transformers/transform-schema-validation-exception.dwl"></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger level="ERROR" message="Caught Exception #[exception]. Pushing message to ${wmq.queue.failure} Queue." 
                doc:name="Log error message"/>
            <set-payload value="#[flowVars.originalMessage]" encoding="UTF-8" mimeType="application/xml"
                doc:name="Set original message to the failure queue"></set-payload>
            <wmq:outbound-endpoint queue="${wmq.coupa.queue.failure}" connector-ref="WMQ"
                doc:name="Send error message to failure queue" correlationId="#[flowVars.messageId]"></wmq:outbound-endpoint>
            <set-variable variableName="exceptionDetails" value="#[exception.cause.message]" doc:name="Variable"></set-variable>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload resource="classpath:transformers/transform-generic-exception.dwl"></dw:set-payload>
            </dw:transform-message>
        </catch-exception-strategy>
    </choice-exception-strategy>
<flow name="sample">
</flow>
</mule>